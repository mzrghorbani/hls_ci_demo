-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Sort_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    a_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    b_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_0_ap_vld : OUT STD_LOGIC;
    b_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_1_ap_vld : OUT STD_LOGIC;
    b_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_2_ap_vld : OUT STD_LOGIC;
    b_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_3_ap_vld : OUT STD_LOGIC;
    b_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    b_4_ap_vld : OUT STD_LOGIC );
end;


architecture behav of Sort_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Sort_top,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-fsgd2104-2L-e,HLS_INPUT_CLOCK=2.780000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.412000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=987,HLS_SYN_LUT=1762,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal a_0_read_reg_613 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_read_reg_613_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_0_read_reg_613_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_read_reg_626 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_read_reg_626_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_1_read_reg_626_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_read_reg_635 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_read_reg_635_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_2_read_reg_635_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_read_reg_651 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_read_reg_651_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_3_read_reg_651_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_4_read_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal a_4_read_reg_666_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal a_4_read_reg_666_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln18_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_676 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_146_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_reg_682 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln18_2_fu_172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_2_reg_687 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_fu_206_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_reg_692 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln22_1_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_1_reg_698 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_2_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_2_reg_705 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_3_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_3_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_3_fu_265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_3_reg_722 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_3_reg_722_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_4_fu_271_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_4_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_4_reg_736_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_7_fu_287_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_7_reg_746 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_7_reg_746_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_9_fu_299_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_9_reg_753 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_9_reg_753_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_9_reg_753_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_13_fu_324_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_13_reg_758 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_13_reg_758_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln18_4_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_4_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_5_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_5_reg_776 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_1_fu_392_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_1_reg_782 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln22_4_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_4_reg_787 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_5_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_5_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_6_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_6_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_14_fu_431_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_14_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_17_fu_447_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_17_reg_816 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_19_fu_459_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_19_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_22_fu_477_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_22_reg_827 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln18_7_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_7_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_8_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_8_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal select_ln18_6_fu_133_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln18_1_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_fu_143_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal phi_ln18_1_i_fu_158_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln18_1_i_fu_158_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln18_1_fu_177_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln18_2_fu_183_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln18_2_i_fu_187_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln18_3_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_fu_247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_1_fu_253_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_2_fu_259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_5_fu_276_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_6_fu_281_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_232_p7 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_8_fu_293_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_10_fu_306_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_11_fu_312_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_12_fu_318_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln18_2_fu_336_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln18_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_3_fu_350_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_4_fu_361_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln18_3_fu_369_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_ln18_4_i_fu_373_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln18_6_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_15_fu_436_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_16_fu_441_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal phi_ln_i_fu_418_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_18_fu_453_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_20_fu_466_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_21_fu_471_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln18_5_fu_489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln18_1_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln21_2_fu_507_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_3_fu_514_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln22_7_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_8_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_ln21_1_i_fu_522_p10 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_24_fu_554_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_26_fu_570_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_23_fu_542_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln22_27_fu_576_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln21_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln21_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to5 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component Sort_top_mux_83_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Sort_top_mux_53_3cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Sort_top_mux_83_3bkb_U1 : component Sort_top_mux_83_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => a_0_read_reg_613,
        din1 => a_1_read_reg_626,
        din2 => a_2_read_reg_635,
        din3 => a_2_read_reg_635,
        din4 => a_2_read_reg_635,
        din5 => a_2_read_reg_635,
        din6 => a_2_read_reg_635,
        din7 => a_2_read_reg_635,
        din8 => phi_ln18_1_i_fu_158_p9,
        dout => phi_ln18_1_i_fu_158_p10);

    Sort_top_mux_83_3bkb_U2 : component Sort_top_mux_83_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => a_0_read_reg_613_pp0_iter1_reg,
        din1 => a_1_read_reg_626_pp0_iter1_reg,
        din2 => a_2_read_reg_635_pp0_iter1_reg,
        din3 => a_3_read_reg_651_pp0_iter1_reg,
        din4 => a_3_read_reg_651_pp0_iter1_reg,
        din5 => a_3_read_reg_651_pp0_iter1_reg,
        din6 => a_3_read_reg_651_pp0_iter1_reg,
        din7 => a_3_read_reg_651_pp0_iter1_reg,
        din8 => zext_ln18_2_fu_183_p1,
        dout => phi_ln18_2_i_fu_187_p10);

    Sort_top_mux_53_3cud_U3 : component Sort_top_mux_53_3cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => a_0_read_reg_613_pp0_iter2_reg,
        din1 => a_1_read_reg_626_pp0_iter2_reg,
        din2 => a_2_read_reg_635_pp0_iter2_reg,
        din3 => a_3_read_reg_651_pp0_iter2_reg,
        din4 => a_4_read_reg_666_pp0_iter2_reg,
        din5 => select_ln21_reg_692,
        dout => tmp_fu_232_p7);

    Sort_top_mux_83_3bkb_U4 : component Sort_top_mux_83_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => select_ln22_3_reg_722,
        din1 => select_ln22_4_reg_736,
        din2 => select_ln22_7_reg_746,
        din3 => select_ln22_3_reg_722,
        din4 => select_ln22_3_reg_722,
        din5 => select_ln22_3_reg_722,
        din6 => select_ln22_3_reg_722,
        din7 => select_ln22_3_reg_722,
        din8 => zext_ln18_3_fu_369_p1,
        dout => phi_ln18_4_i_fu_373_p10);

    Sort_top_mux_83_3bkb_U5 : component Sort_top_mux_83_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => select_ln22_13_reg_758_pp0_iter4_reg,
        din1 => select_ln22_4_reg_736_pp0_iter4_reg,
        din2 => select_ln22_7_reg_746_pp0_iter4_reg,
        din3 => select_ln22_3_reg_722_pp0_iter4_reg,
        din4 => select_ln22_13_reg_758_pp0_iter4_reg,
        din5 => select_ln22_13_reg_758_pp0_iter4_reg,
        din6 => select_ln22_13_reg_758_pp0_iter4_reg,
        din7 => select_ln22_13_reg_758_pp0_iter4_reg,
        din8 => select_ln21_1_reg_782,
        dout => phi_ln_i_fu_418_p10);

    Sort_top_mux_83_3bkb_U6 : component Sort_top_mux_83_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => select_ln22_22_reg_827,
        din1 => select_ln22_22_reg_827,
        din2 => select_ln22_14_reg_808,
        din3 => select_ln22_17_reg_816,
        din4 => select_ln22_22_reg_827,
        din5 => select_ln22_22_reg_827,
        din6 => select_ln22_22_reg_827,
        din7 => select_ln22_22_reg_827,
        din8 => select_ln21_3_fu_514_p3,
        dout => phi_ln21_1_i_fu_522_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_0_read_reg_613 <= a_0;
                a_0_read_reg_613_pp0_iter1_reg <= a_0_read_reg_613;
                a_1_read_reg_626 <= a_1;
                a_1_read_reg_626_pp0_iter1_reg <= a_1_read_reg_626;
                a_2_read_reg_635 <= a_2;
                a_2_read_reg_635_pp0_iter1_reg <= a_2_read_reg_635;
                a_3_read_reg_651 <= a_3;
                a_3_read_reg_651_pp0_iter1_reg <= a_3_read_reg_651;
                a_4_read_reg_666 <= a_4;
                a_4_read_reg_666_pp0_iter1_reg <= a_4_read_reg_666;
                icmp_ln18_2_reg_687 <= icmp_ln18_2_fu_172_p2;
                icmp_ln18_reg_676 <= icmp_ln18_fu_127_p2;
                select_ln18_reg_682 <= select_ln18_fu_146_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                a_0_read_reg_613_pp0_iter2_reg <= a_0_read_reg_613_pp0_iter1_reg;
                a_1_read_reg_626_pp0_iter2_reg <= a_1_read_reg_626_pp0_iter1_reg;
                a_2_read_reg_635_pp0_iter2_reg <= a_2_read_reg_635_pp0_iter1_reg;
                a_3_read_reg_651_pp0_iter2_reg <= a_3_read_reg_651_pp0_iter1_reg;
                a_4_read_reg_666_pp0_iter2_reg <= a_4_read_reg_666_pp0_iter1_reg;
                icmp_ln18_4_reg_771 <= icmp_ln18_4_fu_330_p2;
                icmp_ln18_5_reg_776 <= icmp_ln18_5_fu_344_p2;
                icmp_ln18_7_reg_839 <= icmp_ln18_7_fu_483_p2;
                icmp_ln18_8_reg_844 <= icmp_ln18_8_fu_497_p2;
                icmp_ln22_1_reg_698 <= icmp_ln22_1_fu_214_p2;
                icmp_ln22_2_reg_705 <= icmp_ln22_2_fu_220_p2;
                icmp_ln22_3_reg_713 <= icmp_ln22_3_fu_226_p2;
                icmp_ln22_4_reg_787 <= icmp_ln22_4_fu_400_p2;
                icmp_ln22_5_reg_795 <= icmp_ln22_5_fu_406_p2;
                icmp_ln22_6_reg_801 <= icmp_ln22_6_fu_412_p2;
                select_ln21_1_reg_782 <= select_ln21_1_fu_392_p3;
                select_ln21_reg_692 <= select_ln21_fu_206_p3;
                select_ln22_13_reg_758 <= select_ln22_13_fu_324_p3;
                select_ln22_13_reg_758_pp0_iter4_reg <= select_ln22_13_reg_758;
                select_ln22_14_reg_808 <= select_ln22_14_fu_431_p3;
                select_ln22_17_reg_816 <= select_ln22_17_fu_447_p3;
                select_ln22_19_reg_822 <= select_ln22_19_fu_459_p3;
                select_ln22_22_reg_827 <= select_ln22_22_fu_477_p3;
                select_ln22_3_reg_722 <= select_ln22_3_fu_265_p3;
                select_ln22_3_reg_722_pp0_iter4_reg <= select_ln22_3_reg_722;
                select_ln22_4_reg_736 <= select_ln22_4_fu_271_p3;
                select_ln22_4_reg_736_pp0_iter4_reg <= select_ln22_4_reg_736;
                select_ln22_7_reg_746 <= select_ln22_7_fu_287_p3;
                select_ln22_7_reg_746_pp0_iter4_reg <= select_ln22_7_reg_746;
                select_ln22_9_reg_753 <= select_ln22_9_fu_299_p3;
                select_ln22_9_reg_753_pp0_iter4_reg <= select_ln22_9_reg_753;
                select_ln22_9_reg_753_pp0_iter5_reg <= select_ln22_9_reg_753_pp0_iter4_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to5)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to5 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    b_0 <= select_ln22_9_reg_753_pp0_iter5_reg;

    b_0_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            b_0_ap_vld <= ap_const_logic_1;
        else 
            b_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_1 <= select_ln22_19_reg_822;

    b_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            b_1_ap_vld <= ap_const_logic_1;
        else 
            b_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_2 <= 
        phi_ln21_1_i_fu_522_p10 when (icmp_ln22_7_fu_536_p2(0) = '1') else 
        select_ln22_24_fu_554_p3;

    b_2_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            b_2_ap_vld <= ap_const_logic_1;
        else 
            b_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_3 <= 
        select_ln22_23_fu_542_p3 when (xor_ln21_fu_589_p2(0) = '1') else 
        select_ln22_27_fu_576_p3;

    b_3_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            b_3_ap_vld <= ap_const_logic_1;
        else 
            b_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    b_4 <= 
        select_ln22_27_fu_576_p3 when (xor_ln21_fu_589_p2(0) = '1') else 
        select_ln22_23_fu_542_p3;

    b_4_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            b_4_ap_vld <= ap_const_logic_1;
        else 
            b_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln18_1_fu_138_p2 <= "1" when (signed(select_ln18_6_fu_133_p3) < signed(a_2_read_reg_635)) else "0";
    icmp_ln18_2_fu_172_p2 <= "1" when (signed(phi_ln18_1_i_fu_158_p10) < signed(a_3_read_reg_651)) else "0";
    icmp_ln18_3_fu_201_p2 <= "1" when (signed(phi_ln18_2_i_fu_187_p10) < signed(a_4_read_reg_666_pp0_iter1_reg)) else "0";
    icmp_ln18_4_fu_330_p2 <= "1" when (signed(select_ln22_7_fu_287_p3) > signed(select_ln22_4_fu_271_p3)) else "0";
    icmp_ln18_5_fu_344_p2 <= "1" when (signed(select_ln22_3_fu_265_p3) > signed(select_ln18_2_fu_336_p3)) else "0";
    icmp_ln18_6_fu_387_p2 <= "1" when (signed(select_ln22_13_reg_758) > signed(phi_ln18_4_i_fu_373_p10)) else "0";
    icmp_ln18_7_fu_483_p2 <= "1" when (signed(select_ln22_17_fu_447_p3) > signed(select_ln22_14_fu_431_p3)) else "0";
    icmp_ln18_8_fu_497_p2 <= "1" when (signed(select_ln22_22_fu_477_p3) > signed(select_ln18_5_fu_489_p3)) else "0";
    icmp_ln18_fu_127_p2 <= "1" when (signed(a_1) > signed(a_0)) else "0";
    icmp_ln21_fu_583_p2 <= "1" when (signed(select_ln22_23_fu_542_p3) < signed(select_ln22_27_fu_576_p3)) else "0";
    icmp_ln22_1_fu_214_p2 <= "1" when (select_ln21_fu_206_p3 = ap_const_lv3_2) else "0";
    icmp_ln22_2_fu_220_p2 <= "1" when (select_ln21_fu_206_p3 = ap_const_lv3_0) else "0";
    icmp_ln22_3_fu_226_p2 <= "1" when (select_ln21_fu_206_p3 = ap_const_lv3_1) else "0";
    icmp_ln22_4_fu_400_p2 <= "1" when (select_ln21_1_fu_392_p3 = ap_const_lv3_2) else "0";
    icmp_ln22_5_fu_406_p2 <= "1" when (select_ln21_1_fu_392_p3 = ap_const_lv3_3) else "0";
    icmp_ln22_6_fu_412_p2 <= "1" when (select_ln21_1_fu_392_p3 = ap_const_lv3_1) else "0";
    icmp_ln22_7_fu_536_p2 <= "1" when (select_ln21_3_fu_514_p3 = ap_const_lv3_3) else "0";
    icmp_ln22_8_fu_548_p2 <= "1" when (select_ln21_3_fu_514_p3 = ap_const_lv3_2) else "0";
    icmp_ln22_fu_242_p2 <= "1" when (select_ln21_reg_692 = ap_const_lv3_3) else "0";
    or_ln18_1_fu_503_p2 <= (icmp_ln18_8_reg_844 or icmp_ln18_7_reg_839);
    or_ln18_fu_357_p2 <= (icmp_ln18_5_reg_776 or icmp_ln18_4_reg_771);
    phi_ln18_1_i_fu_158_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_146_p3),3));
    select_ln18_1_fu_177_p3 <= 
        ap_const_lv2_3 when (icmp_ln18_2_reg_687(0) = '1') else 
        select_ln18_reg_682;
    select_ln18_2_fu_336_p3 <= 
        select_ln22_7_fu_287_p3 when (icmp_ln18_4_fu_330_p2(0) = '1') else 
        select_ln22_4_fu_271_p3;
    select_ln18_3_fu_350_p3 <= 
        ap_const_lv2_3 when (icmp_ln18_5_reg_776(0) = '1') else 
        ap_const_lv2_2;
    select_ln18_4_fu_361_p3 <= 
        select_ln18_3_fu_350_p3 when (or_ln18_fu_357_p2(0) = '1') else 
        ap_const_lv2_1;
    select_ln18_5_fu_489_p3 <= 
        select_ln22_17_fu_447_p3 when (icmp_ln18_7_fu_483_p2(0) = '1') else 
        select_ln22_14_fu_431_p3;
    select_ln18_6_fu_133_p3 <= 
        a_1_read_reg_626 when (icmp_ln18_reg_676(0) = '1') else 
        a_0_read_reg_613;
    select_ln18_fu_146_p3 <= 
        ap_const_lv2_2 when (icmp_ln18_1_fu_138_p2(0) = '1') else 
        zext_ln18_fu_143_p1;
    select_ln21_1_fu_392_p3 <= 
        ap_const_lv3_4 when (icmp_ln18_6_fu_387_p2(0) = '1') else 
        zext_ln18_3_fu_369_p1;
    select_ln21_2_fu_507_p3 <= 
        ap_const_lv3_4 when (icmp_ln18_8_reg_844(0) = '1') else 
        ap_const_lv3_3;
    select_ln21_3_fu_514_p3 <= 
        select_ln21_2_fu_507_p3 when (or_ln18_1_fu_503_p2(0) = '1') else 
        ap_const_lv3_2;
    select_ln21_fu_206_p3 <= 
        ap_const_lv3_4 when (icmp_ln18_3_fu_201_p2(0) = '1') else 
        zext_ln18_2_fu_183_p1;
    select_ln22_10_fu_306_p3 <= 
        a_4_read_reg_666_pp0_iter2_reg when (icmp_ln22_fu_242_p2(0) = '1') else 
        a_0_read_reg_613_pp0_iter2_reg;
    select_ln22_11_fu_312_p3 <= 
        a_4_read_reg_666_pp0_iter2_reg when (icmp_ln22_1_reg_698(0) = '1') else 
        select_ln22_10_fu_306_p3;
    select_ln22_12_fu_318_p3 <= 
        a_4_read_reg_666_pp0_iter2_reg when (icmp_ln22_2_reg_705(0) = '1') else 
        select_ln22_11_fu_312_p3;
    select_ln22_13_fu_324_p3 <= 
        a_4_read_reg_666_pp0_iter2_reg when (icmp_ln22_3_reg_713(0) = '1') else 
        select_ln22_12_fu_318_p3;
    select_ln22_14_fu_431_p3 <= 
        select_ln22_4_reg_736_pp0_iter4_reg when (icmp_ln22_4_reg_787(0) = '1') else 
        select_ln22_7_reg_746_pp0_iter4_reg;
    select_ln22_15_fu_436_p3 <= 
        select_ln22_4_reg_736_pp0_iter4_reg when (icmp_ln22_5_reg_795(0) = '1') else 
        select_ln22_3_reg_722_pp0_iter4_reg;
    select_ln22_16_fu_441_p3 <= 
        select_ln22_3_reg_722_pp0_iter4_reg when (icmp_ln22_6_reg_801(0) = '1') else 
        select_ln22_15_fu_436_p3;
    select_ln22_17_fu_447_p3 <= 
        select_ln22_3_reg_722_pp0_iter4_reg when (icmp_ln22_4_reg_787(0) = '1') else 
        select_ln22_16_fu_441_p3;
    select_ln22_18_fu_453_p3 <= 
        select_ln22_4_reg_736_pp0_iter4_reg when (icmp_ln22_6_reg_801(0) = '1') else 
        phi_ln_i_fu_418_p10;
    select_ln22_19_fu_459_p3 <= 
        phi_ln_i_fu_418_p10 when (icmp_ln22_4_reg_787(0) = '1') else 
        select_ln22_18_fu_453_p3;
    select_ln22_1_fu_253_p3 <= 
        a_3_read_reg_651_pp0_iter2_reg when (icmp_ln22_1_reg_698(0) = '1') else 
        select_ln22_fu_247_p3;
    select_ln22_20_fu_466_p3 <= 
        select_ln22_13_reg_758_pp0_iter4_reg when (icmp_ln22_5_reg_795(0) = '1') else 
        select_ln22_4_reg_736_pp0_iter4_reg;
    select_ln22_21_fu_471_p3 <= 
        select_ln22_13_reg_758_pp0_iter4_reg when (icmp_ln22_6_reg_801(0) = '1') else 
        select_ln22_20_fu_466_p3;
    select_ln22_22_fu_477_p3 <= 
        select_ln22_13_reg_758_pp0_iter4_reg when (icmp_ln22_4_reg_787(0) = '1') else 
        select_ln22_21_fu_471_p3;
    select_ln22_23_fu_542_p3 <= 
        select_ln22_14_reg_808 when (icmp_ln22_7_fu_536_p2(0) = '1') else 
        select_ln22_17_reg_816;
    select_ln22_24_fu_554_p3 <= 
        select_ln22_14_reg_808 when (icmp_ln22_8_fu_548_p2(0) = '1') else 
        phi_ln21_1_i_fu_522_p10;
    select_ln22_26_fu_570_p3 <= 
        select_ln22_22_reg_827 when (icmp_ln22_8_fu_548_p2(0) = '1') else 
        select_ln22_14_reg_808;
    select_ln22_27_fu_576_p3 <= 
        select_ln22_22_reg_827 when (icmp_ln22_7_fu_536_p2(0) = '1') else 
        select_ln22_26_fu_570_p3;
    select_ln22_2_fu_259_p3 <= 
        a_3_read_reg_651_pp0_iter2_reg when (icmp_ln22_2_reg_705(0) = '1') else 
        select_ln22_1_fu_253_p3;
    select_ln22_3_fu_265_p3 <= 
        a_3_read_reg_651_pp0_iter2_reg when (icmp_ln22_3_reg_713(0) = '1') else 
        select_ln22_2_fu_259_p3;
    select_ln22_4_fu_271_p3 <= 
        a_0_read_reg_613_pp0_iter2_reg when (icmp_ln22_3_reg_713(0) = '1') else 
        a_1_read_reg_626_pp0_iter2_reg;
    select_ln22_5_fu_276_p3 <= 
        a_0_read_reg_613_pp0_iter2_reg when (icmp_ln22_1_reg_698(0) = '1') else 
        a_2_read_reg_635_pp0_iter2_reg;
    select_ln22_6_fu_281_p3 <= 
        a_2_read_reg_635_pp0_iter2_reg when (icmp_ln22_2_reg_705(0) = '1') else 
        select_ln22_5_fu_276_p3;
    select_ln22_7_fu_287_p3 <= 
        a_2_read_reg_635_pp0_iter2_reg when (icmp_ln22_3_reg_713(0) = '1') else 
        select_ln22_6_fu_281_p3;
    select_ln22_8_fu_293_p3 <= 
        a_0_read_reg_613_pp0_iter2_reg when (icmp_ln22_2_reg_705(0) = '1') else 
        tmp_fu_232_p7;
    select_ln22_9_fu_299_p3 <= 
        tmp_fu_232_p7 when (icmp_ln22_3_reg_713(0) = '1') else 
        select_ln22_8_fu_293_p3;
    select_ln22_fu_247_p3 <= 
        a_0_read_reg_613_pp0_iter2_reg when (icmp_ln22_fu_242_p2(0) = '1') else 
        a_3_read_reg_651_pp0_iter2_reg;
    xor_ln21_fu_589_p2 <= (icmp_ln21_fu_583_p2 xor ap_const_lv1_1);
    zext_ln18_2_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_177_p3),3));
    zext_ln18_3_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_4_fu_361_p3),3));
    zext_ln18_fu_143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln18_reg_676),2));
end behav;
