// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Sort_top,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-fsgd2104-2L-e,HLS_INPUT_CLOCK=2.780000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=2.412000,HLS_SYN_LAT=6,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=987,HLS_SYN_LUT=1762,HLS_VERSION=2020_1}" *)

module Sort_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_0,
        a_1,
        a_2,
        a_3,
        a_4,
        b_0,
        b_0_ap_vld,
        b_1,
        b_1_ap_vld,
        b_2,
        b_2_ap_vld,
        b_3,
        b_3_ap_vld,
        b_4,
        b_4_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] a_0;
input  [31:0] a_1;
input  [31:0] a_2;
input  [31:0] a_3;
input  [31:0] a_4;
output  [31:0] b_0;
output   b_0_ap_vld;
output  [31:0] b_1;
output   b_1_ap_vld;
output  [31:0] b_2;
output   b_2_ap_vld;
output  [31:0] b_3;
output   b_3_ap_vld;
output  [31:0] b_4;
output   b_4_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg b_0_ap_vld;
reg b_1_ap_vld;
reg b_2_ap_vld;
reg b_3_ap_vld;
reg b_4_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] a_0_read_reg_613;
reg   [31:0] a_0_read_reg_613_pp0_iter1_reg;
reg   [31:0] a_0_read_reg_613_pp0_iter2_reg;
reg   [31:0] a_1_read_reg_626;
reg   [31:0] a_1_read_reg_626_pp0_iter1_reg;
reg   [31:0] a_1_read_reg_626_pp0_iter2_reg;
reg   [31:0] a_2_read_reg_635;
reg   [31:0] a_2_read_reg_635_pp0_iter1_reg;
reg   [31:0] a_2_read_reg_635_pp0_iter2_reg;
reg   [31:0] a_3_read_reg_651;
reg   [31:0] a_3_read_reg_651_pp0_iter1_reg;
reg   [31:0] a_3_read_reg_651_pp0_iter2_reg;
reg   [31:0] a_4_read_reg_666;
reg   [31:0] a_4_read_reg_666_pp0_iter1_reg;
reg   [31:0] a_4_read_reg_666_pp0_iter2_reg;
wire   [0:0] icmp_ln18_fu_127_p2;
reg   [0:0] icmp_ln18_reg_676;
wire   [1:0] select_ln18_fu_146_p3;
reg   [1:0] select_ln18_reg_682;
wire   [0:0] icmp_ln18_2_fu_172_p2;
reg   [0:0] icmp_ln18_2_reg_687;
wire   [2:0] select_ln21_fu_206_p3;
reg   [2:0] select_ln21_reg_692;
wire   [0:0] icmp_ln22_1_fu_214_p2;
reg   [0:0] icmp_ln22_1_reg_698;
wire   [0:0] icmp_ln22_2_fu_220_p2;
reg   [0:0] icmp_ln22_2_reg_705;
wire   [0:0] icmp_ln22_3_fu_226_p2;
reg   [0:0] icmp_ln22_3_reg_713;
wire   [31:0] select_ln22_3_fu_265_p3;
reg   [31:0] select_ln22_3_reg_722;
reg   [31:0] select_ln22_3_reg_722_pp0_iter4_reg;
wire   [31:0] select_ln22_4_fu_271_p3;
reg   [31:0] select_ln22_4_reg_736;
reg   [31:0] select_ln22_4_reg_736_pp0_iter4_reg;
wire   [31:0] select_ln22_7_fu_287_p3;
reg   [31:0] select_ln22_7_reg_746;
reg   [31:0] select_ln22_7_reg_746_pp0_iter4_reg;
wire   [31:0] select_ln22_9_fu_299_p3;
reg   [31:0] select_ln22_9_reg_753;
reg   [31:0] select_ln22_9_reg_753_pp0_iter4_reg;
reg   [31:0] select_ln22_9_reg_753_pp0_iter5_reg;
wire   [31:0] select_ln22_13_fu_324_p3;
reg   [31:0] select_ln22_13_reg_758;
reg   [31:0] select_ln22_13_reg_758_pp0_iter4_reg;
wire   [0:0] icmp_ln18_4_fu_330_p2;
reg   [0:0] icmp_ln18_4_reg_771;
wire   [0:0] icmp_ln18_5_fu_344_p2;
reg   [0:0] icmp_ln18_5_reg_776;
wire   [2:0] select_ln21_1_fu_392_p3;
reg   [2:0] select_ln21_1_reg_782;
wire   [0:0] icmp_ln22_4_fu_400_p2;
reg   [0:0] icmp_ln22_4_reg_787;
wire   [0:0] icmp_ln22_5_fu_406_p2;
reg   [0:0] icmp_ln22_5_reg_795;
wire   [0:0] icmp_ln22_6_fu_412_p2;
reg   [0:0] icmp_ln22_6_reg_801;
wire   [31:0] select_ln22_14_fu_431_p3;
reg   [31:0] select_ln22_14_reg_808;
wire   [31:0] select_ln22_17_fu_447_p3;
reg   [31:0] select_ln22_17_reg_816;
wire   [31:0] select_ln22_19_fu_459_p3;
reg   [31:0] select_ln22_19_reg_822;
wire   [31:0] select_ln22_22_fu_477_p3;
reg   [31:0] select_ln22_22_reg_827;
wire   [0:0] icmp_ln18_7_fu_483_p2;
reg   [0:0] icmp_ln18_7_reg_839;
wire   [0:0] icmp_ln18_8_fu_497_p2;
reg   [0:0] icmp_ln18_8_reg_844;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire    ap_block_pp0_stage0;
wire   [31:0] select_ln18_6_fu_133_p3;
wire   [0:0] icmp_ln18_1_fu_138_p2;
wire   [1:0] zext_ln18_fu_143_p1;
wire   [2:0] phi_ln18_1_i_fu_158_p9;
wire   [31:0] phi_ln18_1_i_fu_158_p10;
wire   [1:0] select_ln18_1_fu_177_p3;
wire   [2:0] zext_ln18_2_fu_183_p1;
wire   [31:0] phi_ln18_2_i_fu_187_p10;
wire   [0:0] icmp_ln18_3_fu_201_p2;
wire   [0:0] icmp_ln22_fu_242_p2;
wire   [31:0] select_ln22_fu_247_p3;
wire   [31:0] select_ln22_1_fu_253_p3;
wire   [31:0] select_ln22_2_fu_259_p3;
wire   [31:0] select_ln22_5_fu_276_p3;
wire   [31:0] select_ln22_6_fu_281_p3;
wire   [31:0] tmp_fu_232_p7;
wire   [31:0] select_ln22_8_fu_293_p3;
wire   [31:0] select_ln22_10_fu_306_p3;
wire   [31:0] select_ln22_11_fu_312_p3;
wire   [31:0] select_ln22_12_fu_318_p3;
wire   [31:0] select_ln18_2_fu_336_p3;
wire   [0:0] or_ln18_fu_357_p2;
wire   [1:0] select_ln18_3_fu_350_p3;
wire   [1:0] select_ln18_4_fu_361_p3;
wire   [2:0] zext_ln18_3_fu_369_p1;
wire   [31:0] phi_ln18_4_i_fu_373_p10;
wire   [0:0] icmp_ln18_6_fu_387_p2;
wire   [31:0] select_ln22_15_fu_436_p3;
wire   [31:0] select_ln22_16_fu_441_p3;
wire   [31:0] phi_ln_i_fu_418_p10;
wire   [31:0] select_ln22_18_fu_453_p3;
wire   [31:0] select_ln22_20_fu_466_p3;
wire   [31:0] select_ln22_21_fu_471_p3;
wire   [31:0] select_ln18_5_fu_489_p3;
wire   [0:0] or_ln18_1_fu_503_p2;
wire   [2:0] select_ln21_2_fu_507_p3;
wire   [2:0] select_ln21_3_fu_514_p3;
wire   [0:0] icmp_ln22_7_fu_536_p2;
wire   [0:0] icmp_ln22_8_fu_548_p2;
wire   [31:0] phi_ln21_1_i_fu_522_p10;
wire   [31:0] select_ln22_24_fu_554_p3;
wire   [31:0] select_ln22_26_fu_570_p3;
wire   [31:0] select_ln22_23_fu_542_p3;
wire   [31:0] select_ln22_27_fu_576_p3;
wire   [0:0] icmp_ln21_fu_583_p2;
wire   [0:0] xor_ln21_fu_589_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to5;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

Sort_top_mux_83_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
Sort_top_mux_83_3bkb_U1(
    .din0(a_0_read_reg_613),
    .din1(a_1_read_reg_626),
    .din2(a_2_read_reg_635),
    .din3(a_2_read_reg_635),
    .din4(a_2_read_reg_635),
    .din5(a_2_read_reg_635),
    .din6(a_2_read_reg_635),
    .din7(a_2_read_reg_635),
    .din8(phi_ln18_1_i_fu_158_p9),
    .dout(phi_ln18_1_i_fu_158_p10)
);

Sort_top_mux_83_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
Sort_top_mux_83_3bkb_U2(
    .din0(a_0_read_reg_613_pp0_iter1_reg),
    .din1(a_1_read_reg_626_pp0_iter1_reg),
    .din2(a_2_read_reg_635_pp0_iter1_reg),
    .din3(a_3_read_reg_651_pp0_iter1_reg),
    .din4(a_3_read_reg_651_pp0_iter1_reg),
    .din5(a_3_read_reg_651_pp0_iter1_reg),
    .din6(a_3_read_reg_651_pp0_iter1_reg),
    .din7(a_3_read_reg_651_pp0_iter1_reg),
    .din8(zext_ln18_2_fu_183_p1),
    .dout(phi_ln18_2_i_fu_187_p10)
);

Sort_top_mux_53_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
Sort_top_mux_53_3cud_U3(
    .din0(a_0_read_reg_613_pp0_iter2_reg),
    .din1(a_1_read_reg_626_pp0_iter2_reg),
    .din2(a_2_read_reg_635_pp0_iter2_reg),
    .din3(a_3_read_reg_651_pp0_iter2_reg),
    .din4(a_4_read_reg_666_pp0_iter2_reg),
    .din5(select_ln21_reg_692),
    .dout(tmp_fu_232_p7)
);

Sort_top_mux_83_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
Sort_top_mux_83_3bkb_U4(
    .din0(select_ln22_3_reg_722),
    .din1(select_ln22_4_reg_736),
    .din2(select_ln22_7_reg_746),
    .din3(select_ln22_3_reg_722),
    .din4(select_ln22_3_reg_722),
    .din5(select_ln22_3_reg_722),
    .din6(select_ln22_3_reg_722),
    .din7(select_ln22_3_reg_722),
    .din8(zext_ln18_3_fu_369_p1),
    .dout(phi_ln18_4_i_fu_373_p10)
);

Sort_top_mux_83_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
Sort_top_mux_83_3bkb_U5(
    .din0(select_ln22_13_reg_758_pp0_iter4_reg),
    .din1(select_ln22_4_reg_736_pp0_iter4_reg),
    .din2(select_ln22_7_reg_746_pp0_iter4_reg),
    .din3(select_ln22_3_reg_722_pp0_iter4_reg),
    .din4(select_ln22_13_reg_758_pp0_iter4_reg),
    .din5(select_ln22_13_reg_758_pp0_iter4_reg),
    .din6(select_ln22_13_reg_758_pp0_iter4_reg),
    .din7(select_ln22_13_reg_758_pp0_iter4_reg),
    .din8(select_ln21_1_reg_782),
    .dout(phi_ln_i_fu_418_p10)
);

Sort_top_mux_83_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
Sort_top_mux_83_3bkb_U6(
    .din0(select_ln22_22_reg_827),
    .din1(select_ln22_22_reg_827),
    .din2(select_ln22_14_reg_808),
    .din3(select_ln22_17_reg_816),
    .din4(select_ln22_22_reg_827),
    .din5(select_ln22_22_reg_827),
    .din6(select_ln22_22_reg_827),
    .din7(select_ln22_22_reg_827),
    .din8(select_ln21_3_fu_514_p3),
    .dout(phi_ln21_1_i_fu_522_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_0_read_reg_613 <= a_0;
        a_0_read_reg_613_pp0_iter1_reg <= a_0_read_reg_613;
        a_1_read_reg_626 <= a_1;
        a_1_read_reg_626_pp0_iter1_reg <= a_1_read_reg_626;
        a_2_read_reg_635 <= a_2;
        a_2_read_reg_635_pp0_iter1_reg <= a_2_read_reg_635;
        a_3_read_reg_651 <= a_3;
        a_3_read_reg_651_pp0_iter1_reg <= a_3_read_reg_651;
        a_4_read_reg_666 <= a_4;
        a_4_read_reg_666_pp0_iter1_reg <= a_4_read_reg_666;
        icmp_ln18_2_reg_687 <= icmp_ln18_2_fu_172_p2;
        icmp_ln18_reg_676 <= icmp_ln18_fu_127_p2;
        select_ln18_reg_682 <= select_ln18_fu_146_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        a_0_read_reg_613_pp0_iter2_reg <= a_0_read_reg_613_pp0_iter1_reg;
        a_1_read_reg_626_pp0_iter2_reg <= a_1_read_reg_626_pp0_iter1_reg;
        a_2_read_reg_635_pp0_iter2_reg <= a_2_read_reg_635_pp0_iter1_reg;
        a_3_read_reg_651_pp0_iter2_reg <= a_3_read_reg_651_pp0_iter1_reg;
        a_4_read_reg_666_pp0_iter2_reg <= a_4_read_reg_666_pp0_iter1_reg;
        icmp_ln18_4_reg_771 <= icmp_ln18_4_fu_330_p2;
        icmp_ln18_5_reg_776 <= icmp_ln18_5_fu_344_p2;
        icmp_ln18_7_reg_839 <= icmp_ln18_7_fu_483_p2;
        icmp_ln18_8_reg_844 <= icmp_ln18_8_fu_497_p2;
        icmp_ln22_1_reg_698 <= icmp_ln22_1_fu_214_p2;
        icmp_ln22_2_reg_705 <= icmp_ln22_2_fu_220_p2;
        icmp_ln22_3_reg_713 <= icmp_ln22_3_fu_226_p2;
        icmp_ln22_4_reg_787 <= icmp_ln22_4_fu_400_p2;
        icmp_ln22_5_reg_795 <= icmp_ln22_5_fu_406_p2;
        icmp_ln22_6_reg_801 <= icmp_ln22_6_fu_412_p2;
        select_ln21_1_reg_782 <= select_ln21_1_fu_392_p3;
        select_ln21_reg_692 <= select_ln21_fu_206_p3;
        select_ln22_13_reg_758 <= select_ln22_13_fu_324_p3;
        select_ln22_13_reg_758_pp0_iter4_reg <= select_ln22_13_reg_758;
        select_ln22_14_reg_808 <= select_ln22_14_fu_431_p3;
        select_ln22_17_reg_816 <= select_ln22_17_fu_447_p3;
        select_ln22_19_reg_822 <= select_ln22_19_fu_459_p3;
        select_ln22_22_reg_827 <= select_ln22_22_fu_477_p3;
        select_ln22_3_reg_722 <= select_ln22_3_fu_265_p3;
        select_ln22_3_reg_722_pp0_iter4_reg <= select_ln22_3_reg_722;
        select_ln22_4_reg_736 <= select_ln22_4_fu_271_p3;
        select_ln22_4_reg_736_pp0_iter4_reg <= select_ln22_4_reg_736;
        select_ln22_7_reg_746 <= select_ln22_7_fu_287_p3;
        select_ln22_7_reg_746_pp0_iter4_reg <= select_ln22_7_reg_746;
        select_ln22_9_reg_753 <= select_ln22_9_fu_299_p3;
        select_ln22_9_reg_753_pp0_iter4_reg <= select_ln22_9_reg_753;
        select_ln22_9_reg_753_pp0_iter5_reg <= select_ln22_9_reg_753_pp0_iter4_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to5 = 1'b1;
    end else begin
        ap_idle_pp0_0to5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to5 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        b_0_ap_vld = 1'b1;
    end else begin
        b_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        b_1_ap_vld = 1'b1;
    end else begin
        b_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        b_2_ap_vld = 1'b1;
    end else begin
        b_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        b_3_ap_vld = 1'b1;
    end else begin
        b_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        b_4_ap_vld = 1'b1;
    end else begin
        b_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign b_0 = select_ln22_9_reg_753_pp0_iter5_reg;

assign b_1 = select_ln22_19_reg_822;

assign b_2 = ((icmp_ln22_7_fu_536_p2[0:0] === 1'b1) ? phi_ln21_1_i_fu_522_p10 : select_ln22_24_fu_554_p3);

assign b_3 = ((xor_ln21_fu_589_p2[0:0] === 1'b1) ? select_ln22_23_fu_542_p3 : select_ln22_27_fu_576_p3);

assign b_4 = ((xor_ln21_fu_589_p2[0:0] === 1'b1) ? select_ln22_27_fu_576_p3 : select_ln22_23_fu_542_p3);

assign icmp_ln18_1_fu_138_p2 = (($signed(select_ln18_6_fu_133_p3) < $signed(a_2_read_reg_635)) ? 1'b1 : 1'b0);

assign icmp_ln18_2_fu_172_p2 = (($signed(phi_ln18_1_i_fu_158_p10) < $signed(a_3_read_reg_651)) ? 1'b1 : 1'b0);

assign icmp_ln18_3_fu_201_p2 = (($signed(phi_ln18_2_i_fu_187_p10) < $signed(a_4_read_reg_666_pp0_iter1_reg)) ? 1'b1 : 1'b0);

assign icmp_ln18_4_fu_330_p2 = (($signed(select_ln22_7_fu_287_p3) > $signed(select_ln22_4_fu_271_p3)) ? 1'b1 : 1'b0);

assign icmp_ln18_5_fu_344_p2 = (($signed(select_ln22_3_fu_265_p3) > $signed(select_ln18_2_fu_336_p3)) ? 1'b1 : 1'b0);

assign icmp_ln18_6_fu_387_p2 = (($signed(select_ln22_13_reg_758) > $signed(phi_ln18_4_i_fu_373_p10)) ? 1'b1 : 1'b0);

assign icmp_ln18_7_fu_483_p2 = (($signed(select_ln22_17_fu_447_p3) > $signed(select_ln22_14_fu_431_p3)) ? 1'b1 : 1'b0);

assign icmp_ln18_8_fu_497_p2 = (($signed(select_ln22_22_fu_477_p3) > $signed(select_ln18_5_fu_489_p3)) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_127_p2 = (($signed(a_1) > $signed(a_0)) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_583_p2 = (($signed(select_ln22_23_fu_542_p3) < $signed(select_ln22_27_fu_576_p3)) ? 1'b1 : 1'b0);

assign icmp_ln22_1_fu_214_p2 = ((select_ln21_fu_206_p3 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln22_2_fu_220_p2 = ((select_ln21_fu_206_p3 == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln22_3_fu_226_p2 = ((select_ln21_fu_206_p3 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln22_4_fu_400_p2 = ((select_ln21_1_fu_392_p3 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln22_5_fu_406_p2 = ((select_ln21_1_fu_392_p3 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln22_6_fu_412_p2 = ((select_ln21_1_fu_392_p3 == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln22_7_fu_536_p2 = ((select_ln21_3_fu_514_p3 == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln22_8_fu_548_p2 = ((select_ln21_3_fu_514_p3 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_242_p2 = ((select_ln21_reg_692 == 3'd3) ? 1'b1 : 1'b0);

assign or_ln18_1_fu_503_p2 = (icmp_ln18_8_reg_844 | icmp_ln18_7_reg_839);

assign or_ln18_fu_357_p2 = (icmp_ln18_5_reg_776 | icmp_ln18_4_reg_771);

assign phi_ln18_1_i_fu_158_p9 = select_ln18_fu_146_p3;

assign select_ln18_1_fu_177_p3 = ((icmp_ln18_2_reg_687[0:0] === 1'b1) ? 2'd3 : select_ln18_reg_682);

assign select_ln18_2_fu_336_p3 = ((icmp_ln18_4_fu_330_p2[0:0] === 1'b1) ? select_ln22_7_fu_287_p3 : select_ln22_4_fu_271_p3);

assign select_ln18_3_fu_350_p3 = ((icmp_ln18_5_reg_776[0:0] === 1'b1) ? 2'd3 : 2'd2);

assign select_ln18_4_fu_361_p3 = ((or_ln18_fu_357_p2[0:0] === 1'b1) ? select_ln18_3_fu_350_p3 : 2'd1);

assign select_ln18_5_fu_489_p3 = ((icmp_ln18_7_fu_483_p2[0:0] === 1'b1) ? select_ln22_17_fu_447_p3 : select_ln22_14_fu_431_p3);

assign select_ln18_6_fu_133_p3 = ((icmp_ln18_reg_676[0:0] === 1'b1) ? a_1_read_reg_626 : a_0_read_reg_613);

assign select_ln18_fu_146_p3 = ((icmp_ln18_1_fu_138_p2[0:0] === 1'b1) ? 2'd2 : zext_ln18_fu_143_p1);

assign select_ln21_1_fu_392_p3 = ((icmp_ln18_6_fu_387_p2[0:0] === 1'b1) ? 3'd4 : zext_ln18_3_fu_369_p1);

assign select_ln21_2_fu_507_p3 = ((icmp_ln18_8_reg_844[0:0] === 1'b1) ? 3'd4 : 3'd3);

assign select_ln21_3_fu_514_p3 = ((or_ln18_1_fu_503_p2[0:0] === 1'b1) ? select_ln21_2_fu_507_p3 : 3'd2);

assign select_ln21_fu_206_p3 = ((icmp_ln18_3_fu_201_p2[0:0] === 1'b1) ? 3'd4 : zext_ln18_2_fu_183_p1);

assign select_ln22_10_fu_306_p3 = ((icmp_ln22_fu_242_p2[0:0] === 1'b1) ? a_4_read_reg_666_pp0_iter2_reg : a_0_read_reg_613_pp0_iter2_reg);

assign select_ln22_11_fu_312_p3 = ((icmp_ln22_1_reg_698[0:0] === 1'b1) ? a_4_read_reg_666_pp0_iter2_reg : select_ln22_10_fu_306_p3);

assign select_ln22_12_fu_318_p3 = ((icmp_ln22_2_reg_705[0:0] === 1'b1) ? a_4_read_reg_666_pp0_iter2_reg : select_ln22_11_fu_312_p3);

assign select_ln22_13_fu_324_p3 = ((icmp_ln22_3_reg_713[0:0] === 1'b1) ? a_4_read_reg_666_pp0_iter2_reg : select_ln22_12_fu_318_p3);

assign select_ln22_14_fu_431_p3 = ((icmp_ln22_4_reg_787[0:0] === 1'b1) ? select_ln22_4_reg_736_pp0_iter4_reg : select_ln22_7_reg_746_pp0_iter4_reg);

assign select_ln22_15_fu_436_p3 = ((icmp_ln22_5_reg_795[0:0] === 1'b1) ? select_ln22_4_reg_736_pp0_iter4_reg : select_ln22_3_reg_722_pp0_iter4_reg);

assign select_ln22_16_fu_441_p3 = ((icmp_ln22_6_reg_801[0:0] === 1'b1) ? select_ln22_3_reg_722_pp0_iter4_reg : select_ln22_15_fu_436_p3);

assign select_ln22_17_fu_447_p3 = ((icmp_ln22_4_reg_787[0:0] === 1'b1) ? select_ln22_3_reg_722_pp0_iter4_reg : select_ln22_16_fu_441_p3);

assign select_ln22_18_fu_453_p3 = ((icmp_ln22_6_reg_801[0:0] === 1'b1) ? select_ln22_4_reg_736_pp0_iter4_reg : phi_ln_i_fu_418_p10);

assign select_ln22_19_fu_459_p3 = ((icmp_ln22_4_reg_787[0:0] === 1'b1) ? phi_ln_i_fu_418_p10 : select_ln22_18_fu_453_p3);

assign select_ln22_1_fu_253_p3 = ((icmp_ln22_1_reg_698[0:0] === 1'b1) ? a_3_read_reg_651_pp0_iter2_reg : select_ln22_fu_247_p3);

assign select_ln22_20_fu_466_p3 = ((icmp_ln22_5_reg_795[0:0] === 1'b1) ? select_ln22_13_reg_758_pp0_iter4_reg : select_ln22_4_reg_736_pp0_iter4_reg);

assign select_ln22_21_fu_471_p3 = ((icmp_ln22_6_reg_801[0:0] === 1'b1) ? select_ln22_13_reg_758_pp0_iter4_reg : select_ln22_20_fu_466_p3);

assign select_ln22_22_fu_477_p3 = ((icmp_ln22_4_reg_787[0:0] === 1'b1) ? select_ln22_13_reg_758_pp0_iter4_reg : select_ln22_21_fu_471_p3);

assign select_ln22_23_fu_542_p3 = ((icmp_ln22_7_fu_536_p2[0:0] === 1'b1) ? select_ln22_14_reg_808 : select_ln22_17_reg_816);

assign select_ln22_24_fu_554_p3 = ((icmp_ln22_8_fu_548_p2[0:0] === 1'b1) ? select_ln22_14_reg_808 : phi_ln21_1_i_fu_522_p10);

assign select_ln22_26_fu_570_p3 = ((icmp_ln22_8_fu_548_p2[0:0] === 1'b1) ? select_ln22_22_reg_827 : select_ln22_14_reg_808);

assign select_ln22_27_fu_576_p3 = ((icmp_ln22_7_fu_536_p2[0:0] === 1'b1) ? select_ln22_22_reg_827 : select_ln22_26_fu_570_p3);

assign select_ln22_2_fu_259_p3 = ((icmp_ln22_2_reg_705[0:0] === 1'b1) ? a_3_read_reg_651_pp0_iter2_reg : select_ln22_1_fu_253_p3);

assign select_ln22_3_fu_265_p3 = ((icmp_ln22_3_reg_713[0:0] === 1'b1) ? a_3_read_reg_651_pp0_iter2_reg : select_ln22_2_fu_259_p3);

assign select_ln22_4_fu_271_p3 = ((icmp_ln22_3_reg_713[0:0] === 1'b1) ? a_0_read_reg_613_pp0_iter2_reg : a_1_read_reg_626_pp0_iter2_reg);

assign select_ln22_5_fu_276_p3 = ((icmp_ln22_1_reg_698[0:0] === 1'b1) ? a_0_read_reg_613_pp0_iter2_reg : a_2_read_reg_635_pp0_iter2_reg);

assign select_ln22_6_fu_281_p3 = ((icmp_ln22_2_reg_705[0:0] === 1'b1) ? a_2_read_reg_635_pp0_iter2_reg : select_ln22_5_fu_276_p3);

assign select_ln22_7_fu_287_p3 = ((icmp_ln22_3_reg_713[0:0] === 1'b1) ? a_2_read_reg_635_pp0_iter2_reg : select_ln22_6_fu_281_p3);

assign select_ln22_8_fu_293_p3 = ((icmp_ln22_2_reg_705[0:0] === 1'b1) ? a_0_read_reg_613_pp0_iter2_reg : tmp_fu_232_p7);

assign select_ln22_9_fu_299_p3 = ((icmp_ln22_3_reg_713[0:0] === 1'b1) ? tmp_fu_232_p7 : select_ln22_8_fu_293_p3);

assign select_ln22_fu_247_p3 = ((icmp_ln22_fu_242_p2[0:0] === 1'b1) ? a_0_read_reg_613_pp0_iter2_reg : a_3_read_reg_651_pp0_iter2_reg);

assign xor_ln21_fu_589_p2 = (icmp_ln21_fu_583_p2 ^ 1'd1);

assign zext_ln18_2_fu_183_p1 = select_ln18_1_fu_177_p3;

assign zext_ln18_3_fu_369_p1 = select_ln18_4_fu_361_p3;

assign zext_ln18_fu_143_p1 = icmp_ln18_reg_676;

endmodule //Sort_top
